# Copyright (c) 2016 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

import os

from ..errors import TankError
from .process import subprocess_check_output

class TankGitError(TankError):
    """
    Errors related to git communication
    """
    pass


def execute_git_command(cmd):
    """
    Wrapper around git execution.

    Executes a git command.

    First probes to check if the git executable exists. Next
    executes the given command. Any output generated by the command
    will not be captured but will get emitted to stdout/stderr.

    Git operates in the context of the current working directory,
    so this method is typically used in the following way::

        cwd = os.getcwd()
        try:
            # do something
            execute_git_command("checkout %s -q" % self._branch)
        finally:
            os.chdir(cwd)

    :raises: Will raise a TankGitError on failure
    :param cmd: git command to execute (e.g. 'clone foo.git')
    """
    # first probe to check that git exists in our PATH
    try:
        _ = subprocess_check_output("git --version", shell=True)
    except:
        raise TankGitError(
            "Cannot execute the 'git' command. Please make sure that git is "
            "installed on your system and that the git executable has been added to the PATH."
        )

    status = os.system("git %s" % cmd)
    if status != 0:
        raise TankGitError(
            "Error executing git operation. The git command '%s' "
            "returned error code %s." % (cmd, status)
        )


